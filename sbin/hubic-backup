#!/bin/bash
# make hubic backup and send email notifications with error or success
#{{{
# download hubic-backup from github
# https://github.com/frachop/hubic-backup
#Usage: hubic-backup [OPTIONS]
#
#general:
#  -h [ --help ]                      this message
#  -v [ --version ]                   display version infos
#  --loglevel arg (=trace)            select the log level. ('trace', 'debug', 
#                                     'info', 'notice', 'warning', 'error', 
#                                     'critical', 'alert' or 'emerg')
#
#auth:
#  -l [ --login ] arg                 hubic login
#  -p [ --pwd ] arg                   hubic password
#
#source:
#  -i [ --src ] arg                   source folder
#  -x [ --excludes ] arg              optional exclude file list path
#  --fingerprint-md5                  force local md5 computation to compare 
#                                     with destination file. CPU expansive
#
#destination:
#  -c [ --container ] arg (=default)  destination hubic container
#  -o [ --dst ] arg                   destination folder
#  -k [ --crypt-password ] arg        optional crypto password
#  -d [ --del-non-existing ]          allow deleting non existing backup files
#}}}

# Mail & Output options
# =====================
# please : write logrotate rules for this files
admin_mail="XXX@XX.XX"
hub_log_dir="/var/log/hubic"
hub_log="$hub_log_dir/backup.log"
mail_log="$hub_log_dir/backup-mail.log"
ts_bin="/usr/bin/ts"
[ ! -d $hub_log_dir ] && mkdir -p $hub_log_dir

# HUBIC options
# =============
hub_bin="/usr/local/bin/hubic-backup"
hub_user="XXX@XX.XX"
hub_pass="HUBIC_PASSWORD"
local_path="/var/lib/vz/vzdump/dump/"
remote_path="HUBIC_REMOTE_NAMED_PATH"
#hub_level="notice" # empty message :(
hub_level="info" # WARNING : verbose !!!
bar="####################################################################################"


#
# write title on stdout
#
function title() {
  echo $bar
  printf "# %-80s #\n" "$1"
  echo $bar
}

#
# Backup function
#
function backup() {
  title "sync local backup with hubic"
  $hub_bin \
    --loglevel $hub_level \
    --excludes <(echo "*log") \
    --login $hub_user \
    --pwd $hub_pass \
    --src $local_path \
    --del-non-existing \
    --dst $remote_path
}

#
# remove old archives
#
clean() {
  title "remove old archives"
  local _now=`date +%s`
  local _90=$(($_now-(90*3600*24)))
  local _90_fmt=`date -d @$_90 +%Y%m%d%H%M.%S`
  touch -t $_90_fmt /tmp/timer
  find $local_path ! -newer /tmp/timer -exec rm -v {} \;
}

is_num() {
  local arg="$1"
  [ ! -z "$arg" ] && [ $arg -eq $arg ] 2>/dev/null
}

#
# extractLogs
# extract only useful informations from hubi logs & format it as html
#
extractLogs() {
  local file="$1" _1 _2 _3 _t
  if [ -e $file ] ; then
    # first --
    _t="`cat $file | wc -l`"
    _1="`grep -n -m1   '\-\-$' $file | awk -F: '{print $1}'`"
    _2="`grep -n -m1 'Summary' $file | awk -F: '{print $1}'`"
    echo "<pre>"
    if (is_num "$_1" && is_num "$_2") ; then
      _3="$(($_t-$_2))"
      head -n$(($_1-1)) $file
      tail -n$(($_3+1)) $file
    else
      echo "<span color='red'>log file parse error : Summary or separator -- not found</span>"
      cat $file
      echo "<span color='red'>log file parse error : Summary or separator -- not found</span>"
    fi
    echo "</pre>"
  else
    echo "<span color='red'>'$file': file not found !!!</span>"
  fi
}

#
# rotate logs (gziped with date extension)
# if file exists & is not empty
#
rotate() {
  local file="$1" d content=""
  if [ -e "$file" ] ; then
    content="`cat $file`"
    if [ ! -z "$content" ] ; then
      d="`date -r $file "+%Y%m%d%H%M%S"`"
      cat $file | gzip > ${file}.${d}.gz >/dev/null 2>&1 \
        && echo -n > $file
    fi
  fi
}

#
# quit with error status and send error email
#
quit() {
  [ -x $ts_bin ] \
    && echo -e "$1" | mail -s "$subject" $admin_mail 2>&1 | $ts_bin >> $mail_log \
    || echo -e "$1" | mail -s "$subject" $admin_mail >> $mail_log  2>&1 \
    exit 1
}

##############
# RUN SCRIPT #
##############

[ -x $ts_bin ]     || quit "'$ts_bin' timestamp binary not found or not executable. please install moreutils package."
[ -d $local_path ] || quit "'$local_path' local path not found."
[ -x $hub_bin ]    || quit "'$hub_bin' hubic backup binary not found or not executable."

rotate    $hub_log
clean   > $hub_log
backup >> $hub_log 2>&1
backup_return=$?
if [ $backup_return -eq 0 ] ; then
  subject="[`hostname`]: hubic-backup SUCCESS"
else
  subject="[`hostname`]: hubic-backup ERROR"
fi

extractLogs $hub_log | mail -s "$subject" $admin_mail 2>&1 | $ts_bin >> $mail_log
exit $backup_return
