#!/bin/bash
#{{{
# download hubic-backup from github
# https://github.com/frachop/hubic-backup
#Usage: hubic-backup [OPTIONS]
#
#general:
#  -h [ --help ]                      this message
#  -v [ --version ]                   display version infos
#  --loglevel arg (=trace)            select the log level. ('trace', 'debug', 
#                                     'info', 'notice', 'warning', 'error', 
#                                     'critical', 'alert' or 'emerg')
#
#auth:
#  -l [ --login ] arg                 hubic login
#  -p [ --pwd ] arg                   hubic password
#
#source:
#  -i [ --src ] arg                   source folder
#  -x [ --excludes ] arg              optional exclude file list path
#  --fingerprint-md5                  force local md5 computation to compare 
#                                     with destination file. CPU expansive
#
#destination:
#  -c [ --container ] arg (=default)  destination hubic container
#  -o [ --dst ] arg                   destination folder
#  -k [ --crypt-password ] arg        optional crypto password
#  -d [ --del-non-existing ]          allow deleting non existing backup files
#}}}

# Mail & Output options
# =====================
admin_mail="XXX@XX.XX"
hub_log_dir="/var/log/hubic"
hub_log="$hub_log_dir/backup.log"
mail_log="$hub_log_dir/backup-mail.log"
[ ! -d $hub_log_dir ] && mkdir -p $hub_log_dir

# HUBIC options
# =============
hub_bin="/usr/local/bin/hubic-backup"
hub_user="XXX@XX.XX"
hub_pass="HUBIC_PASSWORD"
local_path="/var/lib/vz/vzdump/dump/"
remote_path="bds_backups"
#hub_level="notice" # empty message :(
hub_level="info" # WARNING : verbose !!!
bar="####################################################################################"


#
# write title on stdout
#
function title() {
	echo $bar
	#echo -e `echo "$1" | tr [[:lower:]] [[:upper:]] | sed -s 's/\(.{80}\)/\1\\n/g'` | printf '# %-80s #' -
	printf "# %-80s #\n" "$1"
	echo $bar
}

#
# Backup function
#
function backup() {
	title "sync local backup with hubic"
	$hub_bin \
		--loglevel $hub_level \
		--excludes <(echo "*log") \
		--login $hub_user \
		--pwd $hub_pass \
		--src $local_path \
		--del-non-existing \
		--dst $remote_path
}

#
# remove old archives
#
clean() {
	title "remove old archives"
	local _now=`date +%s`
	local _90=$(($_now-(90*3600*24)))
	local _90_fmt=`date -d @$_90 +%Y%m%d%H%M.%S`
	touch -t $_90_fmt /tmp/timer
	#date -d @$_now
	#date -d @$_90
	#ls -l /tmp/timer
	find $local_path ! -newer /tmp/timer -exec rm -v {} \;
}

#
# extractLogs
# extract only useful informations from hubi logs & format it as html
#
extractLogs() {
	local file="$1" _1 _2 _3 _t
	if [ -e $file ] ; then
		echo "<pre>"
   # total lines
		_t="`cat $file | wc -l`"
		# first --
		_1="`grep -n -m1   '\-\-$' $file | awk -F: '{print $1}'`"
		head -n$(($_1-1)) $file
		# last ----- Summary -----
		_2="`grep -n -m1 'Summary' $file | awk -F: '{print $1}'`"
   if [ ! -z "$_2" ] ; then
     # total - last
		  _3="$(($_t-$_2))"
		  tail -n$(($_3+1)) $file
   fi
		echo "</pre>"
	else
		echo "<span color='red'>'$file': file not found !!!<span>"
	fi
}

#
# rotate logs (gziped with date extension)
# if file exists & is not empty
#
rotate() {
	local file="$1" d content=""
	if [ -e "$file" ] ; then
		content="`cat $file`"
		if [ ! -z "$content" ] ; then
			d="`date -f $file "+%Y%m%d%H%M%S"`"
			cat $file | gzip > ${file}.${d}.gz >/dev/null 2>&1 \
				&& rm $file \
				&& touch $file
		fi
	fi
}

##############
# RUN SCRIPT #
##############

rotate    $hub_log
clean   > $hub_log
backup >> $hub_log 2>&1
if [ $? -eq 0 ] ; then
	subject="[BDS/MF]: hubic-backup SUCCESS"
else
	subject="[BDS/MF]: hubic-backup ERROR"
fi

extractLogs $hub_log | mail -s "$subject" $admin_mail >> $mail_log  2>&1
