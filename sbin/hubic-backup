#!/bin/bash
# make hubic backup and send email notifications with error or success

# {{{ hubic-backup usage from frachop github user
# download hubic-backup from github
# https://github.com/frachop/hubic-backup
#Usage: hubic-backup [OPTIONS]
#
#general:
#  -h [ --help ]                      this message
#  -v [ --version ]                   display version infos
#  --loglevel arg (=trace)            select the log level. ('trace', 'debug', 
#                                     'info', 'notice', 'warning', 'error', 
#                                     'critical', 'alert' or 'emerg')
#
#auth:
#  -l [ --login ] arg                 hubic login
#  -p [ --pwd ] arg                   hubic password
#
#source:
#  -i [ --src ] arg                   source folder
#  -x [ --excludes ] arg              optional exclude file list path
#  --fingerprint-md5                  force local md5 computation to compare 
#                                     with destination file. CPU expansive
#
#destination:
#  -c [ --container ] arg (=default)  destination hubic container
#  -o [ --dst ] arg                   destination folder
#  -k [ --crypt-password ] arg        optional crypto password
#  -d [ --del-non-existing ]          allow deleting non existing backup files
#}}}

# {{{ CONSTANTS DECLARATIONS

# Mail & Output options
# =====================
# please : write logrotate rules for this files
ADMIN_MAIL="XXX@XX.XX"
HUB_LOG_DIR="/var/log/hubic"
HUB_LOG="$HUB_LOG_DIR/backup.log"
MAIL_LOG="$HUB_LOG_DIR/backup-mail.log"
TS_BIN="/usr/bin/ts"
SUBJECT="[`hostname`]: hubic-backup ERROR"
[ ! -d $HUB_LOG_DIR ] && mkdir -p $HUB_LOG_DIR

# HUBIC options
# =============
HUB_BIN="/usr/local/bin/hubic-backup"
HUB_USER="XXX@XX.XX"
HUB_PASS="HUBIC_PASSWORD"
LOCAL_PATH="/var/lib/vz/vzdump/dump/"
REMOTE_PATH="HUBIC_REMOTE_NAMED_PATH"
#HUB_LEVEL="notice" # empty message :(
HUB_LEVEL="info" # WARNING : verbose !!!
BAR="####################################################################################"

# Archive Cleanup
# ===============
RETENTION_DAYS="180"
ARCHIVE_REGEX="FIND_CONTAINER_FILE_NAME_REGEX"

# }}}

# {{{ function title
#
# write title on stdout
#
function title() {
  echo $BAR
  printf "# <b>%-80s</b> #\n" "$1"
  echo $BAR
}
#}}}
# {{{ function backup
#
function backup() {
  title "Syncing local backup with hubic"
  $HUB_BIN \
    --loglevel $HUB_LEVEL \
    --excludes <(echo "*log") \
    --login $HUB_USER \
    --pwd $HUB_PASS \
    --src $LOCAL_PATH \
    --del-non-existing \
    --fingerprint-md5 \
    --dst $REMOTE_PATH
}
#}}}
# {{{ function clean
#
# remove old archives
#
clean() {
  title "Removing old archives"
  local _now=`date +%s`
  local _days_ago=$(($_now-($RETENTION_DAYS*3600*24)))
  local _days_ago_fmt=`date -d @$_days_ago +%Y%m%d%H%M.%S`
  touch -t $_days_ago_fmt /tmp/timer
  find $LOCAL_PATH ! -newer /tmp/timer -name "$ARCHIVE_REGEX" -type f -exec rm -v {} \; \
    | grep "." \
    || echo "<span style='color:orange;'><b>There is no archive to remove !</b></span>"
}
#}}}
# {{{ function is_num
#
is_num() {
  local arg="$1"
  [ ! -z "$arg" ] && [ $arg -eq $arg ] 2>/dev/null
}
#}}}
# {{{ function extractLogs
#
# extract only useful informations from hubi logs & format it as html
#
extractLogs() {
  local file="$1" _1 _2 _3 _t
  if [ -e $file ] ; then
    # first --
    _t="`cat $file | wc -l`"
    _1="`grep -n -m1   '\-\-$' $file | awk -F: '{print $1}'`"
    _2="`grep -n -m1 'Summary' $file | awk -F: '{print $1}'`"
    echo "<pre>"
    if (is_num "$_1" && is_num "$_2") ; then
      _3="$(($_t-$_2))"
      head -n$(($_1-1)) $file
      tail -n$(($_3+1)) $file
    else
      echo "<span color='red'>log file parse error : Summary or separator -- not found</span>"
      cat $file
      echo "<span color='red'>log file parse error : Summary or separator -- not found</span>"
    fi
    echo "</pre>"
  else
    echo "<span color='red'>'$file': file not found !!!</span>"
  fi
}
#}}}
# {{{ function rotate
#
# rotate logs (gziped with date extension)
# if file exists & is not empty
#
rotate() {
  local file="$1" d content=""
  if [ -e "$file" ] ; then
    content="`cat $file`"
    if [ ! -z "$content" ] ; then
      d="`date -r $file "+%Y%m%d%H%M%S"`"
      cat $file | gzip > ${file}.${d}.gz >/dev/null 2>&1 \
        && echo -n > $file
    fi
  fi
}
#}}}
# {{{ function quit
#
# quit with error status and send error email
#
quit() {
  local mess="$1"
  [ -x $TS_BIN ] \
    && echo -e "<span style='color:red;'><b>$mess</b></span>" \
      | mail -a"Content-Type: text/html" -s "$SUBJECT" $ADMIN_MAIL 2>&1 | $TS_BIN >> $MAIL_LOG \
    || echo -e "<span style='color:red;'><b>$mess</b></span>" \
      | mail -a"Content-Type: text/html" -s "$SUBJECT" $ADMIN_MAIL >> $MAIL_LOG  2>&1
  exit 1
}
#}}}

##############
# RUN SCRIPT #
##############

# {{{ bin & path tests
[ -x $TS_BIN ]     || quit "'$TS_BIN' timestamp binary not found or not executable. please install moreutils package."
[ -d $LOCAL_PATH ] || quit "'$LOCAL_PATH' local path not found."
[ -x $HUB_BIN ]    || quit "'$HUB_BIN' hubic backup binary not found or not executable."
# }}}

rotate    $HUB_LOG
clean   > $HUB_LOG
backup >> $HUB_LOG 2>&1
backup_return=$?
if [ $backup_return -eq 0 ] ; then
  SUBJECT="[`hostname`]: hubic-backup SUCCESS"
fi

extractLogs $HUB_LOG | mail -a"Content-Type: text/html" -s "$SUBJECT" $ADMIN_MAIL 2>&1 | $TS_BIN >> $MAIL_LOG
exit $backup_return
